plugins {
    id 'java'
    id 'io.quarkus'
    id 'io.freefair.lombok' version '8.7.1'
    id 'jacoco'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation enforcedPlatform("${quarkusPlatformGroupId}:quarkus-amazon-services-bom:${quarkusPlatformVersion}")

    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-rest-client-jackson'
    implementation 'io.quarkus:quarkus-rest-client'
    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-amazon-lambda-rest'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-resteasy-jackson'
    implementation 'io.quarkiverse.amazonservices:quarkus-amazon-dynamodb'
    implementation 'io.quarkiverse.amazonservices:quarkus-amazon-ssm'

    implementation 'software.amazon.awssdk:url-connection-client'

    implementation 'one.util:streamex:0.8.3'
    implementation 'com.github.spotbugs:spotbugs-annotations:4.8.6'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
    testImplementation 'io.quarkus:quarkus-jacoco'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.1'
    testImplementation 'org.skyscreamer:jsonassert:1.5.3'

    testImplementation 'com.amazonaws:aws-java-sdk-dynamodb:1.12.425'

    testImplementation platform('org.testcontainers:testcontainers-bom:1.20.2')
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mockserver'
    testImplementation 'org.mock-server:mockserver-client-java:5.13.2'
}

group 'com.yuriytkach'
version '3.3.1'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    testLogging {
        events "passed", "skipped", "failed"
    }
    jacoco {
        excludeClassLoaders = ["*QuarkusClassLoader"]
        destinationFile = layout.buildDirectory.file("jacoco-quarkus.exec").get().asFile
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

jacocoTestReport {
    dependsOn test
    executionData { tasks.withType(Test).findAll { it.jacoco.destinationFile.exists() }*.jacoco.destinationFile }
    reports {
        xml.required = true
    }
}

[compileJava].forEach {
    it -> it.dependsOn(compileQuarkusGeneratedSourcesJava)
}
